{
	"info": {
		"_postman_id": "5f242dd5-aef2-40dc-a657-c02cc883f3a9",
		"name": "Teste Carguero",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5472144",
		"_collection_link": "https://galactic-comet-710251.postman.co/workspace/Automa%C3%A7%C3%A3o-Carguero~bf154942-b40f-435b-815a-0f10f72d0eea/collection/5472144-5f242dd5-aef2-40dc-a657-c02cc883f3a9?action=share&source=collection_link&creator=5472144"
	},
	"item": [
		{
			"name": "Cadastro de id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Convertendo o corpo da resposta em JSON\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"//Validar se o StatusCode está retornando conforme o esperado \"201 Createc\"\r",
							"pm.test('Validar StatusCode', () => {\r",
							"    pm.response.to.have.status(201)\r",
							"    pm.response.to.have.status('Created')\r",
							"})\r",
							"\r",
							"//Validar se o Body Response está retornando corretamente com o campo \"id\" e o seu dado correspondente numérico\r",
							"pm.test('Validar body Response', () => {\r",
							"    pm.expect(jsonData).to.have.key('id')\r",
							"    pm.expect(jsonData.id).to.be.a('number')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://jsonplaceholder.typicode.com/posts",
					"protocol": "http",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consulta para retornar todos id da base",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Convertendo o corpo da resposta em JSON\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"//Validar se o StatusCode está retornando conforme o esperado \"200 OK\"\r",
							"pm.test('Validar StatusCode para consulta full válida com sucesso', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.response.to.have.status('OK')\r",
							"})\r",
							"\r",
							"//Validar se o Body Response está retornando corretamente com o campo \"userId, id, title e body\" e o seus dados correspondentes\r",
							"pm.test('Validar Body Response para consulta full válida com sucesso', function() {\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.keys('userId', 'id', 'title', 'body')\r",
							"        pm.expect(item.userId).to.be.a('number')\r",
							"        pm.expect(item.id).to.be.a('number')\r",
							"        pm.expect(item.title).to.be.a('string')\r",
							"        pm.expect(item.body).to.be.a('string')\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://jsonplaceholder.typicode.com/posts",
					"protocol": "http",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consulta para retornar um único id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Convertendo o corpo da resposta em JSON\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"//Validar se o StatusCode está retornando conforme o esperado \"200 OK\"\r",
							"pm.test('Validar StatusCode para consulta de um único \"id\" válido com sucesso', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"    pm.response.to.have.status('OK')\r",
							"})\r",
							"\r",
							"//Validar se o Body Response está retornando corretamente com o campo \"userId, id, title e body\" e o seus dados correspondentes\r",
							"pm.test('Validar Body Response  para consulta de um único \"id\" válido com sucesso', () => {\r",
							"        pm.expect(jsonData).to.have.keys('userId', 'id', 'title', 'body')\r",
							"        pm.expect(jsonData.userId).to.be.a('number')\r",
							"        pm.expect(jsonData.id).to.be.a('number')\r",
							"        pm.expect(jsonData.title).to.be.a('string')\r",
							"        pm.expect(jsonData.body).to.be.a('string')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://jsonplaceholder.typicode.com/posts/4",
					"protocol": "http",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consulta com id inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Convertendo o corpo da resposta em JSON\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"//Validar se o StatusCode está retornando conforme o esperado \"404 Not Found\"\r",
							"pm.test('Validar StatusCode para consulta com dados inexistentes', () => {\r",
							"    pm.response.to.have.status(404)\r",
							"    pm.response.to.have.status('Not Found')\r",
							"})\r",
							"\r",
							"//Validar se o Body Response está retornando corretamente sem informações\r",
							"pm.test('Validar body Response para consulta com dados inexistentes', () => {\r",
							"    pm.expect(pm.response.json()).to.eql({})\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://jsonplaceholder.typicode.com/posts/102",
					"protocol": "http",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"102"
					]
				}
			},
			"response": []
		}
	]
}